/* This program is writen by qp09.
 * usually just for fun.
 * Sat October 24 2015
 */

#include <mpi.h>
#include <sys/time.h>
#include <stdio.h>

#include "utils/cuda/helper_cuda.h"
#include "GFunc.h"
#include "gpu_kernel.h"
#include "MultiGPUSimulator.h"

#define TEST

MultiGPUSimulator::MultiGPUSimulator(Network *network, real dt) : SimulatorBase(network, dt)
{
	rank = -1;
	size = -1;
}

MultiGPUSimulator::~MultiGPUSimulator()
{
}

GNetwork* splitNetwork(GNetwork *, int);
GNetwork* recvNetwork();
GNetwork* copyDataToGPU(GNetwork *);
int freeGPUData(GNetwork *);

int MultiGPUSimulator::init(int argc, char**argv)
{
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
}

int MultiGPUSimulator::run(real time)
{
	findCudaDevice(0, NULL);

	int sim_cycle = round(time/dt);

	reset();

	GNetwork *pCpuNet = NULL;
	FILE *logFile = NULL;
	if (rank == 0) {
		logFile = fopen("SimGPU.log", "w+");
		if (logFile == NULL) {
			printf("ERROR: Open file SimGPU.log failed\n");
			return -1;
		}

		GNetwork *pAllNet = network->buildNetwork();
		pCpuNet = splitNetwork(pAllNet, size);
	} else {
		pCpuNet = recvNetwork();
	}



	GNetwork *c_pGpuNet = copyDataToGPU(pCpuNet);
	GNetwork *pGpuNet;
	void **c_pNeurons;
	void **c_pSynapses;
	int *c_gTimeTable = NULL;
	int *c_gFiredTable = NULL;
	bool *c_gSynapsesFiredTable = NULL;
	real *c_gNeuronInput = NULL;

	int nTypeNum = pCpuNet->nTypeNum;
	int sTypeNum = pCpuNet->sTypeNum;
	int totalNeuronNum = pCpuNet->neuronNums[nTypeNum];
	int totalSynapseNum = pCpuNet->synapseNums[sTypeNum];
	printf("NeuronTypeNum: %d, SynapseTypeNum: %d\n", nTypeNum, sTypeNum);
	printf("NeuronNum: %d, SynapseNum: %d\n", totalNeuronNum, totalSynapseNum);

	int MAX_DELAY = (int)(pCpuNet->MAX_DELAY/dt);
	printf("MAX_DELAY: %lf %lf %lf\n", network->maxDelay, pCpuNet->MAX_DELAY, dt);
	printf("MAX_DELAY: %u\n", MAX_DELAY);

	int * c_n_fired = (int*)malloc(sizeof(int)*((totalNeuronNum)));
	checkCudaErrors(cudaMalloc((void**)&(pGpuNet), sizeof(GNetwork)));
	checkCudaErrors(cudaMemcpy(pGpuNet, c_pGpuNet, sizeof(GNetwork), cudaMemcpyHostToDevice));

	c_pNeurons = (void**)malloc(sizeof(void*)*pCpuNet->nTypeNum);
	checkCudaErrors(cudaMemcpy(c_pNeurons, c_pGpuNet->pNeurons, sizeof(void*)*(pCpuNet->nTypeNum), cudaMemcpyDeviceToHost));
	c_pSynapses = (void**)malloc(sizeof(void*)*pCpuNet->sTypeNum);
	checkCudaErrors(cudaMemcpy(c_pSynapses, c_pGpuNet->pSynapses, sizeof(void*)*(pCpuNet->sTypeNum), cudaMemcpyDeviceToHost));

	checkCudaErrors(cudaMalloc((void**)&c_gTimeTable, sizeof(int)*(MAX_DELAY+1)));
	checkCudaErrors(cudaMemset(c_gTimeTable, 0, sizeof(int)*(MAX_DELAY+1)));
	checkCudaErrors(cudaMalloc((void**)&c_gFiredTable, sizeof(int)*((totalNeuronNum)*(MAX_DELAY+1))));
	checkCudaErrors(cudaMemset(c_gFiredTable, 0, sizeof(int)*((totalNeuronNum)*(MAX_DELAY+1))));
	checkCudaErrors(cudaMalloc((void**)&c_gSynapsesFiredTable, sizeof(bool)*(totalSynapseNum)));
	checkCudaErrors(cudaMemset(c_gSynapsesFiredTable, 0, sizeof(bool)*(totalSynapseNum)));
	checkCudaErrors(cudaMalloc((void**)&c_gNeuronInput, sizeof(real)*(totalNeuronNum)));
	checkCudaErrors(cudaMemset(c_gNeuronInput, 0, sizeof(real)*(totalNeuronNum)));

	init_global<<<1, 1, 0>>>(MAX_DELAY, c_gTimeTable, c_gNeuronInput, c_gFiredTable, totalNeuronNum, c_gSynapsesFiredTable, totalSynapseNum, pGpuNet);

	vector<int> firedInfo;
	printf("Start runing for %d cycles\n", sim_cycle);
	struct timeval ts, te;
	gettimeofday(&ts, NULL);
	for (int time=0; time<sim_cycle; time++) {
		printf("\rCycle: %d", time);

		for (int i=0; i<nTypeNum; i++) {
			updateType[pCpuNet->nTypes[i]](c_pNeurons[i], pCpuNet->neuronNums[i+1]-pCpuNet->neuronNums[i], time);
		}

		update_pre_synapse<<<1, 1, 0>>>(pGpuNet, time);

		for (int i=0; i<sTypeNum; i++) {
			updateType[pCpuNet->sTypes[i]](c_pSynapses[i], pCpuNet->synapseNums[i+1]-pCpuNet->synapseNums[i], time);
		}

		update_post_synapse<<<1, 1, 0>>>(pGpuNet, time);

		int currentIdx = time%(MAX_DELAY+1);
		checkCudaErrors(cudaMemcpy(c_n_fired, c_gFiredTable + totalNeuronNum*currentIdx, sizeof(int)*(totalNeuronNum), cudaMemcpyDeviceToHost));

		int count = 0;
		firedInfo.clear();
		for (int i=0; i<pCpuNet->neuronNums[nTypeNum]; i++) {
			if (c_n_fired[i] > 0) {
				firedInfo.push_back(i);
			}
		}

		if (rank == 0) {
			fprintf(logFile, "Cycle %d: ", time);
			int size = firedInfo.size();
			if (size > 0) {
				fprintf(logFile, "%d_%d", network->idx2id[0].groupId, network->idx2id[0].id);
				for (int i=1; i<size; i++) {
					fprintf(logFile, " %d_%d", network->idx2id[i].groupId, network->idx2id[i].id);
				}
			}
			fprintf(logFile, "\n");
		}
	}
	gettimeofday(&te, NULL);
	long seconds = te.tv_sec - ts.tv_sec;
	long hours = seconds/3600;
	seconds = seconds%3600;
	long minutes = seconds/60;
	seconds = seconds%60;
	long uSeconds = te.tv_usec - ts.tv_usec;
	if (uSeconds < 0) {
		uSeconds += 1000000;
		seconds = seconds - 1;
	}

	printf("\nSimulation finesed in %ld:%ld:%ld.%06lds\n", hours, minutes, seconds, uSeconds);

	checkCudaErrors(cudaFree(c_gTimeTable));
	checkCudaErrors(cudaFree(c_gFiredTable));
	checkCudaErrors(cudaFree(c_gSynapsesFiredTable));

	freeGPUData(c_pGpuNet);
	checkCudaErrors(cudaFree(pGpuNet));

	return 0;
}

GNetwork* copyDataToGPU(GNetwork *pCpuNet)
{
	GNetwork *tmpNet = (GNetwork*)malloc(sizeof(GNetwork));
	memcpy(tmpNet, pCpuNet, sizeof(GNetwork));

	int nTypeNum = pCpuNet->nTypeNum;
	int sTypeNum = pCpuNet->sTypeNum;

	Type *nTypes, *sTypes;
	checkCudaErrors(cudaMalloc((void**)&(nTypes), sizeof(Type)*nTypeNum));
	checkCudaErrors(cudaMemcpy(nTypes, pCpuNet->nTypes, sizeof(Type)*nTypeNum, cudaMemcpyHostToDevice));
	checkCudaErrors(cudaMalloc((void**)&(sTypes), sizeof(Type)*sTypeNum));
	checkCudaErrors(cudaMemcpy(sTypes, pCpuNet->sTypes, sizeof(Type)*sTypeNum, cudaMemcpyHostToDevice));

	int *neuronNums, *synapseNums;
	checkCudaErrors(cudaMalloc((void**)&(neuronNums), sizeof(int)*(nTypeNum+1)));
	checkCudaErrors(cudaMemcpy(neuronNums, pCpuNet->neuronNums, sizeof(int)*(nTypeNum+1), cudaMemcpyHostToDevice));
	checkCudaErrors(cudaMalloc((void**)&(synapseNums), sizeof(int)*(sTypeNum+1)));
	checkCudaErrors(cudaMemcpy(synapseNums, pCpuNet->synapseNums, sizeof(int)*(sTypeNum+1), cudaMemcpyHostToDevice));

	//TODO support multitype N and S
	void **pNs = (void**)malloc(sizeof(void*)*nTypeNum);
	void **pSs = (void**)malloc(sizeof(void*)*sTypeNum);

	for (int i=0; i<nTypeNum; i++) {
		void *pNTmp = createType[pCpuNet->nTypes[i]]();
		memcpy(pNTmp, pCpuNet->pNeurons[i], getSize[pCpuNet->nTypes[i]]());
		cudaAllocType[pCpuNet->nTypes[i]](pCpuNet->pNeurons[i], pNTmp);
		void *pNGpu;
		checkCudaErrors(cudaMalloc((void**)&(pNGpu), getSize[pCpuNet->nTypes[i]]()));
		checkCudaErrors(cudaMemcpy(pNGpu, pNTmp, getSize[pCpuNet->nTypes[i]](), cudaMemcpyHostToDevice));
		free(pNTmp);
		pNs[i] = pNGpu;
	}

	for (int i=0; i<sTypeNum; i++) {
		void *pSTmp = createType[pCpuNet->sTypes[i]]();
		memcpy(pSTmp, pCpuNet->pSynapses[i], getSize[pCpuNet->sTypes[i]]());
		cudaAllocType[pCpuNet->sTypes[i]](pCpuNet->pSynapses[i], pSTmp);
		void *pSGpu;
		checkCudaErrors(cudaMalloc((void**)&(pSGpu), getSize[pCpuNet->sTypes[i]]()));
		checkCudaErrors(cudaMemcpy(pSGpu, pSTmp, getSize[pCpuNet->sTypes[i]](), cudaMemcpyHostToDevice));
		free(pSTmp);
		pSs[i] = pSGpu;

	}


	void **pNeurons, **pSynapses;
	checkCudaErrors(cudaMalloc((void**)&(pNeurons), sizeof(void*)*nTypeNum));
	checkCudaErrors(cudaMemcpy(pNeurons, pNs, sizeof(void*)*nTypeNum, cudaMemcpyHostToDevice));
	checkCudaErrors(cudaMalloc((void**)&(pSynapses), sizeof(void*)*sTypeNum));
	checkCudaErrors(cudaMemcpy(pSynapses, pSs, sizeof(void*)*sTypeNum, cudaMemcpyHostToDevice));
	free(pNs);
	free(pSs);

	tmpNet->pNeurons = pNeurons;
	tmpNet->pSynapses = pSynapses;
	tmpNet->nTypes = nTypes;
	tmpNet->sTypes = sTypes;
	tmpNet->neuronNums = neuronNums;
	tmpNet->synapseNums = synapseNums;

	return tmpNet;

}


int freeGPUData(GNetwork *pGpuNet)
{
	GNetwork *pTmpNet = pGpuNet;

	int nTypeNum = pTmpNet->nTypeNum;
	int sTypeNum = pTmpNet->sTypeNum;

	void **pTmpNs = (void**)malloc(sizeof(void*) * nTypeNum);
	checkCudaErrors(cudaMemcpy(pTmpNs, pTmpNet->pNeurons, sizeof(void*)*nTypeNum, cudaMemcpyDeviceToHost));
	void **pTmpSs = (void**)malloc(sizeof(void*) * sTypeNum);
	checkCudaErrors(cudaMemcpy(pTmpSs, pTmpNet->pSynapses, sizeof(void*)*sTypeNum, cudaMemcpyDeviceToHost));

	Type * pTmpNT = (Type*)malloc(sizeof(Type)*nTypeNum);
	checkCudaErrors(cudaMemcpy(pTmpNT, pTmpNet->nTypes, sizeof(Type)*nTypeNum, cudaMemcpyDeviceToHost));
	Type * pTmpST = (Type*)malloc(sizeof(Type)*sTypeNum);
	checkCudaErrors(cudaMemcpy(pTmpST, pTmpNet->sTypes, sizeof(Type)*sTypeNum, cudaMemcpyDeviceToHost));

	for (int i=0; i<nTypeNum; i++) {
		void *pTmpN = createType[pTmpNT[i]]();
		checkCudaErrors(cudaMemcpy(pTmpN, pTmpNs[i], getSize[pTmpNT[i]](), cudaMemcpyDeviceToHost));
		cudaFreeType[pTmpNT[i]](pTmpN);
		free(pTmpN);
	}

	for (int i=0; i<sTypeNum; i++) {
		void *pTmpS = createType[pTmpST[i]]();
		checkCudaErrors(cudaMemcpy(pTmpS, pTmpSs[i], getSize[pTmpST[i]](), cudaMemcpyDeviceToHost));
		cudaFreeType[pTmpST[i]](pTmpS);
		free(pTmpS);
	}

	checkCudaErrors(cudaFree(pTmpNet->nTypes));
	checkCudaErrors(cudaFree(pTmpNet->sTypes));
	free(pTmpNT);
	free(pTmpST);

	checkCudaErrors(cudaFree(pTmpNet->neuronNums));
	checkCudaErrors(cudaFree(pTmpNet->synapseNums));

	checkCudaErrors(cudaFree(pTmpNet->pNeurons));
	checkCudaErrors(cudaFree(pTmpNet->pSynapses));
	free(pTmpNs);
	free(pTmpSs);
	free(pTmpNet);

	return 0;
}
GNetwork* splitNetwork(GNetwork *network, int size)
{
	int nTypeNum = network->nTypeNum;
	int sTypeNum = network->sTypeNum;
	int totalNeuronNum = network->neuronNums[nTypeNum];
	int totalSynapseNum = network->synapseNums[sTypeNum];
	printf("NeuronTypeNum: %d, SynapseTypeNum: %d\n", nTypeNum, sTypeNum);
	printf("NeuronNum: %d, SynapseNum: %d\n", totalNeuronNum, totalSynapseNum);
	printf("MAX_DELAY: %lf\n", network->MAX_DELAY);

	int nTypeNum_other = 0;
	int nTypeNum_this = 0;
	int* nSize_other = malloc(sizeof(int)*nTypeNum);
	int* nSize_this = malloc(sizeof(int)*nTypeNum);
	int* sSize_other = malloc(sizeof(int)*sTypeNum);
	int* sSize_this = malloc(sizeof(int)*sTypeNum);
	for (int i=0; i<nTypeNum; i++) {
		int num_i = network->neuronNums[i+1] - network->neuronNums[i];
		int size_other = round(num_i/size);
		int size_this = num_i - size_other*size;
		if (size_other > 0) {
			nTypeNum_other++;
		}
		if (size_this > 0) {
			nTypeNum_this++;
		}
		nSize_this[i] = size_this;
		nSize_other[i] = size_this;
	}
}

GNetwork* recvNetwork()
{
}
